name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  APP_NAME: mini-http-service

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get build info
      id: build_info
      run: |
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME="${APP_NAME}-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build \
          -ldflags "-X main.version=${{ steps.build_info.outputs.version }} -X main.buildTime=${{ steps.build_info.outputs.build_time }} -X main.gitCommit=${{ steps.build_info.outputs.commit }} -w -s" \
          -o "build/${BINARY_NAME}" \
          .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Create release packages
      run: |
        mkdir -p dist
        
        # Create Windows package
        mkdir -p "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64"
        cp "artifacts/${APP_NAME}-windows-amd64/${APP_NAME}-windows-amd64.exe" "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/"
        cp config.yaml "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/" || true
        cp README.md "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/" || true
        cp LICENSE "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/" || true
        mkdir -p "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/static"
        mkdir -p "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/docs"
        cp static/* "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/static/" 2>/dev/null || true
        cp docs/* "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/docs/" 2>/dev/null || true
        
        cd dist && zip -r "${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64.zip" "${APP_NAME}-${GITHUB_REF#refs/tags/}-windows-amd64/" && cd ..
        
        # Create Linux package
        mkdir -p "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64"
        cp "artifacts/${APP_NAME}-linux-amd64/${APP_NAME}-linux-amd64" "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/${APP_NAME}"
        cp config.yaml "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/" || true
        cp README.md "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/" || true
        cp LICENSE "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/" || true
        mkdir -p "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/static"
        mkdir -p "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/docs"
        cp static/* "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/static/" 2>/dev/null || true
        cp docs/* "dist/${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/docs/" 2>/dev/null || true
        
        cd dist && tar -czf "${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64.tar.gz" "${APP_NAME}-${GITHUB_REF#refs/tags/}-linux-amd64/" && cd ..

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.zip
          dist/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
        platforms: linux/amd64,linux/arm64